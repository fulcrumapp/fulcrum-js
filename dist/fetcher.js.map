{"version":3,"sources":["../src/fetcher.js"],"names":["getQueryString","params","Object","keys","map","encodeURIComponent","k","join","errorMessageForStatus","status","messages","Fetcher","options","queue","Queue","concurrency","headers","opts","forEach","key","baseURI","hasOwnProperty","body","JSON","stringify","url","fetch","resp","ok","errorMessage","authenticationErrorHandler","Error","contentType","get","split","json","text","add","_fetch","path","qs","_processOptions","assign","method","_queue","func"],"mappings":"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","file":"fetcher.js","sourcesContent":["import 'isomorphic-fetch';\nimport Queue from 'p-queue';\n\nfunction getQueryString(params) {\n  return Object.keys(params)\n    .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\n    .join('&');\n}\n\nfunction errorMessageForStatus(status) {\n  const messages = {\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found'\n  };\n\n  return messages[status] || `HTTP ${status}`;\n}\n\nexport default class Fetcher {\n  constructor(options) {\n    this.options = options;\n    this.queue = new Queue({concurrency: 3});\n    this.headers = options.headers;\n  }\n\n  _processOptions(opts) {\n    const options = {\n      ...opts,\n      headers: {\n        ...this.headers,\n        ...opts.headers\n      }\n    };\n\n    // remove any nil or blank headers\n    // (e.g. to automatically set Content-Type with `FormData` boundary)\n    Object.keys(options.headers).forEach(key => {\n      if (typeof options.headers[key] === 'undefined' ||\n          options.headers[key] === null ||\n          options.headers[key] === '') {\n        delete options.headers[key];\n      }\n    });\n\n    delete options.baseURI;\n\n    if (options && options.hasOwnProperty('body') &&\n        options.hasOwnProperty('headers') && options.headers['Content-Type'] === 'application/json') {\n      options.body = JSON.stringify(options.body);\n    }\n\n    return options;\n  }\n\n  async _fetch(url, options) {\n    const resp = await fetch(url, options);\n\n    if (!resp.ok) {\n      const errorMessage = errorMessageForStatus(resp.status) || 'Unknown Error';\n\n      if (errorMessage === 'Unauthorized' && this.authenticationErrorHandler) {\n        this.authenticationErrorHandler();\n      }\n\n      throw new Error(errorMessage);\n    }\n\n    const contentType = resp.headers.get('Content-Type');\n\n    if (contentType && contentType.split(';')[0] === 'application/json') {\n      return resp.json();\n    }\n\n    return resp.text();\n  }\n\n  _queue(url, options) {\n    return this.queue.add(() => this._fetch(url, options));\n  }\n\n  get(path, opts) {\n    let url = this.options.baseURI + '/' + path;\n\n    if (opts && opts.hasOwnProperty('qs')) {\n      url += '?' + getQueryString(opts.qs);\n      delete opts.qs;\n    }\n\n    const options = this._processOptions(Object.assign({method: 'GET'}, opts));\n\n    return this._queue(url, options);\n  }\n\n  post(path, opts) {\n    const url = this.options.baseURI + '/' + path;\n\n    const options = this._processOptions(Object.assign({method: 'POST'}, opts));\n\n    return this._queue(url, options);\n  }\n\n  put(path, opts) {\n    const url = this.options.baseURI + '/' + path;\n\n    const options = this._processOptions(Object.assign({method: 'PUT'}, opts));\n\n    return this._queue(url, options);\n  }\n\n  del(path, opts) {\n    const url = this.options.baseURI + '/' + path;\n\n    const options = this._processOptions(Object.assign({method: 'DELETE'}, opts));\n\n    return this._queue(url, options);\n  }\n\n  registerAuthenticationErrorHandler(func) {\n    this.authenticationErrorHandler = func;\n  }\n}\n"]}